<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="error.pirate.backend.salesOrder.query.mapper.SalesOrderMapper">

    <!--  주문서 목록 조회  -->
    <select id="selectSalesOrderList" resultType="error.pirate.backend.salesOrder.query.dto.SalesOrderListItemDTO">
        SELECT
            tb_sales_order.sales_order_seq,
            tb_sales_order.sales_order_name,
            (SELECT
                GROUP_CONCAT(tb_item.item_name SEPARATOR ", ")
            FROM tb_sales_order_item
            JOIN tb_item USING (item_seq)
            WHERE tb_sales_order.sales_order_seq = tb_sales_order_item.sales_order_seq) AS item_name,
            tb_client.client_name,
            tb_sales_order.sales_order_order_date,
            tb_sales_order.sales_order_due_date,
            tb_sales_order.sales_order_status
        FROM tb_sales_order
        JOIN tb_client USING (client_seq)
        WHERE tb_sales_order.sales_order_status NOT IN ("DELETE")
        <if test="startDate != null"><![CDATA[
            AND #{startDate} <= tb_sales_order.sales_order_order_date
        ]]></if>
        <if test="endDate != null"><![CDATA[
            AND #{endDate} >= tb_sales_order.sales_order_order_date
        ]]></if>
        <if test="clientName != null">
            AND tb_client.client_name LIKE CONCAT('%', #{clientName}, '%')
        </if>
        <if test="salesOrderStatus != null">
            AND tb_sales_order.sales_order_status IN
            <foreach collection="salesOrderStatus" item="item" open="(" separator="," close=")">#{item}</foreach>
        </if>
        ORDER BY tb_sales_order.sales_order_reg_date DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!--  주문서 목록 개수 조회  -->
    <select id="countSalesOrderList" resultType="int">
        SELECT
            COUNT(*)
        FROM tb_sales_order
        JOIN tb_client USING (client_seq)
        WHERE tb_sales_order.sales_order_status NOT IN ("DELETE")
        <if test="startDate != null"><![CDATA[
            AND #{startDate} <= tb_sales_order.sales_order_order_date
        ]]></if>
        <if test="endDate != null"><![CDATA[
            AND #{endDate} >= tb_sales_order.sales_order_order_date
        ]]></if>
        <if test="clientName != null">
            AND tb_client.client_name LIKE CONCAT('%', #{clientName}, '%')
        </if>
        <if test="salesOrderStatus != null">
            AND tb_sales_order.sales_order_status IN
            <foreach collection="salesOrderStatus" item="item" open="(" separator="," close=")">#{item}</foreach>
        </if>
    </select>
    
    <!--  주문서 상세 조회  -->
    <select id="selectSalesOrder" resultType="error.pirate.backend.salesOrder.query.dto.SalesOrderDTO">
        SELECT
            tb_sales_order.sales_order_seq,
            tb_sales_order.sales_order_name,
            tb_client.client_name,
            tb_sales_order.sales_order_extended_price,
            tb_sales_order.sales_order_total_quantity,
            tb_user.user_name,
            tb_sales_order.sales_order_order_date,
            tb_sales_order.sales_order_due_date,
            tb_sales_order.sales_order_note
        FROM tb_sales_order
        JOIN tb_user USING (user_seq)
        JOIN tb_client USING (client_seq)
        WHERE tb_sales_order.sales_order_status NOT IN ("DELETE")
        AND tb_sales_order.sales_order_seq = #{salesOrderSeq}
    </select>
    
    <!--  주문서 상세 품목 조회  -->
    <select id="selectSalesOrderItem" resultType="error.pirate.backend.salesOrder.query.dto.SalesOrderItemDTO">
        SELECT
            tb_sales_order_item.sales_order_item_seq,
            tb_sales_order_item.item_seq,
            tb_item.item_image_url,
            tb_item.item_division,
            tb_item.item_name,
            tb_sales_order_item.sales_order_item_quantity,
            tb_sales_order_item.sales_order_item_price,
            tb_sales_order_item.sales_order_item_note
        FROM tb_sales_order_item
        JOIN tb_item USING (item_seq)
        WHERE tb_sales_order_item.sales_order_seq = #{salesOrderSeq}
    </select>
    
    <!--  주문서 현황 조회  -->
    <select id="selectSalesOrderSituation" resultType="error.pirate.backend.salesOrder.query.dto.SalesOrderSituationResponse">
        SELECT
            tb_sales_order.sales_order_order_date,
            tb_sales_order.sales_order_name,
            tb_sales_order.sales_order_total_quantity,
            tb_sales_order.sales_order_extended_price,
            tb_client.client_name,
            tb_sales_order.sales_order_note,
            DATE_FORMAT(tb_sales_order.sales_order_order_date, '%Y-%m') as sales_order_order_month,
            IFNULL(SUM(tb_sales_order.sales_order_extended_price), 0) as sales_order_month_price,
            IFNULL(SUM(tb_sales_order.sales_order_total_quantity), 0) as sales_order_month_quantity
        FROM tb_sales_order
        JOIN tb_client USING (client_seq)
        WHERE tb_sales_order.sales_order_status NOT IN ("DELETE")
        <if test="startDate != null"><![CDATA[
            AND #{startDate} <= tb_sales_order.sales_order_order_date
        ]]></if>
        <if test="endDate != null"><![CDATA[
            AND #{endDate} >= tb_sales_order.sales_order_order_date
        ]]></if>
        <if test="clientName != null">
            AND tb_client.client_name LIKE CONCAT('%', #{clientName}, '%')
        </if>
        GROUP BY
            DATE_FORMAT(tb_sales_order.sales_order_order_date, '%Y-%m'),
            tb_sales_order.sales_order_order_date WITH ROLLUP;
    </select>

    <!--  주문서 품목 값 확인  -->
    <select id="sumSalesOrderItemValue" resultType="error.pirate.backend.salesOrder.query.dto.SalesOrderItemCheckDTO">
        SELECT
            tb_quotation_item.item_seq AS item,
            tb_quotation_item.quotation_item_quantity - NVL((
                SELECT
                    SUM(tb_sales_order_item.sales_order_item_quantity)
                FROM tb_sales_order
                JOIN tb_sales_order_item USING (sales_order_seq)
                WHERE tb_sales_order.quotation_seq = tb_quotation.quotation_seq
                AND tb_sales_order_item.item_seq = item
                AND tb_sales_order.sales_order_status NOT IN ("DELETE")
            ), 0) AS remaining_quantity
        FROM tb_quotation AS tb_quotation
        JOIN tb_quotation_item USING (quotation_seq)
        WHERE tb_quotation.quotation_status NOT IN ("DELETE")
        AND tb_quotation.quotation_seq = #{quotationSeq}
    </select>

    <!--  주문서 목록 엑셀 다운로드  -->
    <select id="selectSalesOrderExcel" resultType="error.pirate.backend.salesOrder.query.dto.SalesOrderExcelDTO">
        SELECT
            tb_sales_order.sales_order_reg_date,
            tb_sales_order.sales_order_mod_date,
            tb_sales_order.sales_order_name,
            tb_sales_order.sales_order_status,
            tb_sales_order.sales_order_order_date,
            tb_sales_order.sales_order_due_date,
            tb_sales_order.sales_order_total_quantity,
            tb_sales_order.sales_order_extended_price,
            tb_sales_order.sales_order_note
        FROM tb_sales_order
        WHERE tb_sales_order.sales_order_status NOT IN ("DELETE")
        <if test="startDate != null"><![CDATA[
            AND #{startDate} <= tb_sales_order.sales_order_order_date
        ]]></if>
        <if test="endDate != null"><![CDATA[
            AND #{endDate} >= tb_sales_order.sales_order_order_date
        ]]></if>
        <if test="clientName != null">
            AND tb_client.client_name LIKE CONCAT('%', #{clientName}, '%')
        </if>
        <if test="salesOrderStatus != null">
            AND tb_sales_order.sales_order_status IN
            <foreach collection="salesOrderStatus" item="item" open="(" separator="," close=")">#{item}</foreach>
        </if>
    </select>

    <!--  주문서 현황 엑셀 다운로드  -->
    <select id="selectSalesOrderSituationExcel" resultType="error.pirate.backend.salesOrder.query.dto.SalesOrderSituationExcelDTO">
        SELECT
            tb_sales_order.sales_order_order_date,
            tb_sales_order.sales_order_name,
            tb_sales_order.sales_order_total_quantity,
            tb_sales_order.sales_order_extended_price,
            tb_client.client_name,
            tb_sales_order.sales_order_note
        FROM tb_sales_order
        JOIN tb_client USING (client_seq)
        WHERE tb_sales_order.sales_order_status NOT IN ("DELETE")
        <if test="startDate != null"><![CDATA[
            AND #{startDate} <= tb_sales_order.sales_order_order_date
        ]]></if>
        <if test="endDate != null"><![CDATA[
            AND #{endDate} >= tb_sales_order.sales_order_order_date
        ]]></if>
        <if test="clientName != null">
            AND tb_client.client_name LIKE CONCAT('%', #{clientName}, '%')
        </if>
    </select>

    <!-- 작업지시서가 등록된 주문서 물품 조회 -->
    <select id="selectRegisteredItemSeqsBySalesOrderSeq" resultType="Long">
        SELECT soi.sales_order_item_seq
          FROM tb_sales_order_item soi
         WHERE soi.sales_order_seq = #{salesOrderSeq}
           AND EXISTS (
               SELECT 1
                 FROM tb_work_order wo
                WHERE wo.sales_order_seq = soi.sales_order_seq
                  AND wo.item_seq = soi.item_seq
                  AND wo.work_order_status != 'DELETE'
        )
    </select>

    <!-- 주문서번호로 주문서 물품 조회 -->
    <select id="findItemsBySalesOrderSeq" resultType="error.pirate.backend.salesOrder.command.domain.aggregate.entity.SalesOrderItem">
        SELECT *
          FROM tb_sales_order_item
         WHERE sales_order_seq = #{salesOrderSeq}
    </select>

    <select id="selectSalesOrderItemStockStatus" resultType="error.pirate.backend.salesOrder.query.dto.SalesOrderItemStockStatusResponse">
        SELECT
            soi.sales_order_item_seq,
            soi.item_seq,
            (SELECT i.item_name
            FROM tb_item i
            WHERE i.item_seq = soi.item_seq) AS item_name,
            i.item_image_url,
            soi.sales_order_item_quantity AS required_quantity,
<!--         모든 하위 항목이 충족될 때만 available_quantity 계산-->
        CASE
            WHEN EXISTS (
            SELECT 1
            FROM tb_bom_item bi
            LEFT JOIN tb_item_inventory ii
            ON bi.child_item_seq = ii.item_seq
        <![CDATA[
            AND ii.item_inventory_expiration_date > CURRENT_TIMESTAMP()
        ]]>
            WHERE bi.parent_item_seq = soi.item_seq
        AND (ii.item_inventory_remain_amount IS NULL
        <![CDATA[
            OR ii.item_inventory_remain_amount < bi.bom_child_item_quantity)
        ]]>
        ) THEN 0
        ELSE FLOOR(
            (SELECT MIN(subquery.calculated_quantity_per_child)
            FROM (
            SELECT
            bi.parent_item_seq,
            bi.child_item_seq,
            bi.bom_child_item_quantity,
            SUM(ii.item_inventory_remain_amount) AS total_remain_amount,
            SUM(ii.item_inventory_remain_amount) / bi.bom_child_item_quantity AS calculated_quantity_per_child
            FROM tb_bom_item bi
            LEFT JOIN tb_item_inventory ii
            ON bi.child_item_seq = ii.item_seq
            AND ii.item_inventory_expiration_date > CURRENT_TIMESTAMP()
            GROUP BY bi.parent_item_seq, bi.child_item_seq, bi.bom_child_item_quantity
            ) AS subquery
            WHERE subquery.parent_item_seq = soi.item_seq)
            )
        END AS available_quantity,
<!--         부족 수량 계산-->
        GREATEST(
            CASE
            WHEN EXISTS (
                SELECT 1
                FROM tb_bom_item bi
                LEFT JOIN tb_item_inventory ii
                ON bi.child_item_seq = ii.item_seq
            <![CDATA[
                AND ii.item_inventory_expiration_date > CURRENT_TIMESTAMP()
                ]]>
                WHERE bi.parent_item_seq = soi.item_seq
                AND (ii.item_inventory_remain_amount IS NULL
            <![CDATA[
                OR ii.item_inventory_remain_amount < bi.bom_child_item_quantity)
                ]]>
            ) THEN soi.sales_order_item_quantity
            ELSE soi.sales_order_item_quantity - FLOOR(
                (SELECT MIN(subquery.calculated_quantity_per_child)
                FROM (
                SELECT
                bi.parent_item_seq,
                bi.child_item_seq,
                bi.bom_child_item_quantity,
                SUM(ii.item_inventory_remain_amount) AS total_remain_amount,
                SUM(ii.item_inventory_remain_amount) / bi.bom_child_item_quantity AS calculated_quantity_per_child
                FROM tb_bom_item bi
                LEFT JOIN tb_item_inventory ii
                ON bi.child_item_seq = ii.item_seq
            <![CDATA[
                AND ii.item_inventory_expiration_date > CURRENT_TIMESTAMP()
                ]]>
                GROUP BY bi.parent_item_seq, bi.child_item_seq, bi.bom_child_item_quantity
                ) AS subquery
            WHERE subquery.parent_item_seq = soi.item_seq)
            )
            END,
            0
        ) AS insufficient_quantity,
        <!-- 재고 충분 여부-->
            CASE
            WHEN EXISTS (
                SELECT 1
                FROM tb_bom_item bi
                LEFT JOIN tb_item_inventory ii
                ON bi.child_item_seq = ii.item_seq
                <![CDATA[
                AND ii.item_inventory_expiration_date > CURRENT_TIMESTAMP()
                ]]>
                WHERE bi.parent_item_seq = soi.item_seq
                AND (ii.item_inventory_remain_amount IS NULL
            <![CDATA[
                OR ii.item_inventory_remain_amount < bi.bom_child_item_quantity * soi.sales_order_item_quantity)
                ]]>
            ) THEN false  <!--재고 부족 또는 만료-->
            ELSE true <!--충분한 재고-->
            END AS is_stock_enough,
            soi.sales_order_item_note
        FROM tb_sales_order_item soi
        LEFT JOIN tb_bom_item bi ON soi.item_seq = bi.parent_item_seq
        LEFT JOIN tb_item_inventory ii ON bi.child_item_seq = ii.item_seq
        LEFT JOIN tb_item i ON soi.item_seq = i.item_seq
        WHERE soi.sales_order_seq = #{salesOrderSeq}
        GROUP BY
            soi.sales_order_item_seq,
            soi.item_seq,
            soi.sales_order_item_quantity
    </select>

</mapper>
